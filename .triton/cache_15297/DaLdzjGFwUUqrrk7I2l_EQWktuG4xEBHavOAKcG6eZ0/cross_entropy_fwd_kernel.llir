; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @cross_entropy_fwd_kernel(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, float %5, float %6, float %7, i32 %8, i32 %9, i32 %10, i32 %11, i32 %12) local_unnamed_addr !dbg !7 {
  %14 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !10
  %15 = sext i32 %12 to i64, !dbg !11
  %16 = sext i32 %14 to i64, !dbg !12
  %17 = mul nsw i64 %16, %15, !dbg !12
  %18 = getelementptr bfloat, ptr addrspace(1) %3, i64 %17, !dbg !13
  %19 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !14
  %20 = shl i32 %19, 3, !dbg !14
  %21 = and i32 %20, 4088, !dbg !14
  %22 = icmp sgt i32 %11, 0, !dbg !15
  br i1 %22, label %.lr.ph, label %._crit_edge, !dbg !15

.lr.ph:                                           ; preds = %13
  %23 = lshr i32 %19, 5, !dbg !14
  %24 = and i32 %19, 31, !dbg !14
  %25 = icmp eq i32 %24, 0
  %26 = and i32 %23, 15
  %27 = zext nneg i32 %26 to i64
  %28 = getelementptr float, ptr addrspace(3) @global_smem, i64 %27
  %29 = icmp slt i32 %19, 16
  %30 = sext i32 %19 to i64
  %31 = getelementptr float, ptr addrspace(3) @global_smem, i64 %30
  %32 = and i32 %19, 15
  %33 = icmp eq i32 %32, 0
  %34 = and i1 %29, %33
  br label %35, !dbg !15

35:                                               ; preds = %.lr.ph, %35
  %36 = phi float [ 0xFFF0000000000000, %.lr.ph ], [ %258, %35 ]
  %37 = phi float [ 0.000000e+00, %.lr.ph ], [ %430, %35 ]
  %38 = phi i32 [ 0, %.lr.ph ], [ %431, %35 ]
  %39 = or disjoint i32 %38, %21, !dbg !16
  %40 = or disjoint i32 %39, 4096, !dbg !16
  %41 = or disjoint i32 %39, 8192, !dbg !16
  %42 = or disjoint i32 %39, 12288, !dbg !16
  %43 = icmp slt i32 %39, %11, !dbg !17
  %44 = icmp slt i32 %40, %11, !dbg !17
  %45 = icmp slt i32 %41, %11, !dbg !17
  %46 = icmp slt i32 %42, %11, !dbg !17
  %47 = sext i32 %39 to i64, !dbg !18
  %48 = getelementptr bfloat, ptr addrspace(1) %18, i64 %47, !dbg !18
  %49 = sext i32 %40 to i64, !dbg !18
  %50 = getelementptr bfloat, ptr addrspace(1) %18, i64 %49, !dbg !18
  %51 = sext i32 %41 to i64, !dbg !18
  %52 = getelementptr bfloat, ptr addrspace(1) %18, i64 %51, !dbg !18
  %53 = sext i32 %42 to i64, !dbg !18
  %54 = getelementptr bfloat, ptr addrspace(1) %18, i64 %53, !dbg !18
  %55 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %48, i1 %43, i32 -8323200, i1 %43, i32 -8323200, i1 %43, i32 -8323200, i1 %43, i32 -8323200, i1 %43) #4, !dbg !19
  %56 = extractvalue { i32, i32, i32, i32 } %55, 0, !dbg !19
  %57 = bitcast i32 %56 to <2 x bfloat>, !dbg !19
  %58 = extractvalue { i32, i32, i32, i32 } %55, 1, !dbg !19
  %59 = bitcast i32 %58 to <2 x bfloat>, !dbg !19
  %60 = extractvalue { i32, i32, i32, i32 } %55, 2, !dbg !19
  %61 = bitcast i32 %60 to <2 x bfloat>, !dbg !19
  %62 = extractvalue { i32, i32, i32, i32 } %55, 3, !dbg !19
  %63 = bitcast i32 %62 to <2 x bfloat>, !dbg !19
  %64 = extractelement <2 x bfloat> %57, i64 0, !dbg !19
  %65 = extractelement <2 x bfloat> %57, i64 1, !dbg !19
  %66 = extractelement <2 x bfloat> %59, i64 0, !dbg !19
  %67 = extractelement <2 x bfloat> %59, i64 1, !dbg !19
  %68 = extractelement <2 x bfloat> %61, i64 0, !dbg !19
  %69 = extractelement <2 x bfloat> %61, i64 1, !dbg !19
  %70 = extractelement <2 x bfloat> %63, i64 0, !dbg !19
  %71 = extractelement <2 x bfloat> %63, i64 1, !dbg !19
  %72 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %50, i1 %44, i32 -8323200, i1 %44, i32 -8323200, i1 %44, i32 -8323200, i1 %44, i32 -8323200, i1 %44) #4, !dbg !19
  %73 = extractvalue { i32, i32, i32, i32 } %72, 0, !dbg !19
  %74 = bitcast i32 %73 to <2 x bfloat>, !dbg !19
  %75 = extractvalue { i32, i32, i32, i32 } %72, 1, !dbg !19
  %76 = bitcast i32 %75 to <2 x bfloat>, !dbg !19
  %77 = extractvalue { i32, i32, i32, i32 } %72, 2, !dbg !19
  %78 = bitcast i32 %77 to <2 x bfloat>, !dbg !19
  %79 = extractvalue { i32, i32, i32, i32 } %72, 3, !dbg !19
  %80 = bitcast i32 %79 to <2 x bfloat>, !dbg !19
  %81 = extractelement <2 x bfloat> %74, i64 0, !dbg !19
  %82 = extractelement <2 x bfloat> %74, i64 1, !dbg !19
  %83 = extractelement <2 x bfloat> %76, i64 0, !dbg !19
  %84 = extractelement <2 x bfloat> %76, i64 1, !dbg !19
  %85 = extractelement <2 x bfloat> %78, i64 0, !dbg !19
  %86 = extractelement <2 x bfloat> %78, i64 1, !dbg !19
  %87 = extractelement <2 x bfloat> %80, i64 0, !dbg !19
  %88 = extractelement <2 x bfloat> %80, i64 1, !dbg !19
  %89 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %52, i1 %45, i32 -8323200, i1 %45, i32 -8323200, i1 %45, i32 -8323200, i1 %45, i32 -8323200, i1 %45) #4, !dbg !19
  %90 = extractvalue { i32, i32, i32, i32 } %89, 0, !dbg !19
  %91 = bitcast i32 %90 to <2 x bfloat>, !dbg !19
  %92 = extractvalue { i32, i32, i32, i32 } %89, 1, !dbg !19
  %93 = bitcast i32 %92 to <2 x bfloat>, !dbg !19
  %94 = extractvalue { i32, i32, i32, i32 } %89, 2, !dbg !19
  %95 = bitcast i32 %94 to <2 x bfloat>, !dbg !19
  %96 = extractvalue { i32, i32, i32, i32 } %89, 3, !dbg !19
  %97 = bitcast i32 %96 to <2 x bfloat>, !dbg !19
  %98 = extractelement <2 x bfloat> %91, i64 0, !dbg !19
  %99 = extractelement <2 x bfloat> %91, i64 1, !dbg !19
  %100 = extractelement <2 x bfloat> %93, i64 0, !dbg !19
  %101 = extractelement <2 x bfloat> %93, i64 1, !dbg !19
  %102 = extractelement <2 x bfloat> %95, i64 0, !dbg !19
  %103 = extractelement <2 x bfloat> %95, i64 1, !dbg !19
  %104 = extractelement <2 x bfloat> %97, i64 0, !dbg !19
  %105 = extractelement <2 x bfloat> %97, i64 1, !dbg !19
  %106 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %54, i1 %46, i32 -8323200, i1 %46, i32 -8323200, i1 %46, i32 -8323200, i1 %46, i32 -8323200, i1 %46) #4, !dbg !19
  %107 = extractvalue { i32, i32, i32, i32 } %106, 0, !dbg !19
  %108 = bitcast i32 %107 to <2 x bfloat>, !dbg !19
  %109 = extractvalue { i32, i32, i32, i32 } %106, 1, !dbg !19
  %110 = bitcast i32 %109 to <2 x bfloat>, !dbg !19
  %111 = extractvalue { i32, i32, i32, i32 } %106, 2, !dbg !19
  %112 = bitcast i32 %111 to <2 x bfloat>, !dbg !19
  %113 = extractvalue { i32, i32, i32, i32 } %106, 3, !dbg !19
  %114 = bitcast i32 %113 to <2 x bfloat>, !dbg !19
  %115 = extractelement <2 x bfloat> %108, i64 0, !dbg !19
  %116 = extractelement <2 x bfloat> %108, i64 1, !dbg !19
  %117 = extractelement <2 x bfloat> %110, i64 0, !dbg !19
  %118 = extractelement <2 x bfloat> %110, i64 1, !dbg !19
  %119 = extractelement <2 x bfloat> %112, i64 0, !dbg !19
  %120 = extractelement <2 x bfloat> %112, i64 1, !dbg !19
  %121 = extractelement <2 x bfloat> %114, i64 0, !dbg !19
  %122 = extractelement <2 x bfloat> %114, i64 1, !dbg !19
  %123 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(bfloat %64) #4, !dbg !20
  %124 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(bfloat %65) #4, !dbg !20
  %125 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(bfloat %66) #4, !dbg !20
  %126 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(bfloat %67) #4, !dbg !20
  %127 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(bfloat %68) #4, !dbg !20
  %128 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(bfloat %69) #4, !dbg !20
  %129 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(bfloat %70) #4, !dbg !20
  %130 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(bfloat %71) #4, !dbg !20
  %131 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(bfloat %81) #4, !dbg !20
  %132 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(bfloat %82) #4, !dbg !20
  %133 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(bfloat %83) #4, !dbg !20
  %134 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(bfloat %84) #4, !dbg !20
  %135 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(bfloat %85) #4, !dbg !20
  %136 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(bfloat %86) #4, !dbg !20
  %137 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(bfloat %87) #4, !dbg !20
  %138 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(bfloat %88) #4, !dbg !20
  %139 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(bfloat %98) #4, !dbg !20
  %140 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(bfloat %99) #4, !dbg !20
  %141 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(bfloat %100) #4, !dbg !20
  %142 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(bfloat %101) #4, !dbg !20
  %143 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(bfloat %102) #4, !dbg !20
  %144 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(bfloat %103) #4, !dbg !20
  %145 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(bfloat %104) #4, !dbg !20
  %146 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(bfloat %105) #4, !dbg !20
  %147 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(bfloat %115) #4, !dbg !20
  %148 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(bfloat %116) #4, !dbg !20
  %149 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(bfloat %117) #4, !dbg !20
  %150 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(bfloat %118) #4, !dbg !20
  %151 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(bfloat %119) #4, !dbg !20
  %152 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(bfloat %120) #4, !dbg !20
  %153 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(bfloat %121) #4, !dbg !20
  %154 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(bfloat %122) #4, !dbg !20
  %155 = fmul float %6, %123, !dbg !21
  %156 = fmul float %6, %124, !dbg !21
  %157 = fmul float %6, %125, !dbg !21
  %158 = fmul float %6, %126, !dbg !21
  %159 = fmul float %6, %127, !dbg !21
  %160 = fmul float %6, %128, !dbg !21
  %161 = fmul float %6, %129, !dbg !21
  %162 = fmul float %6, %130, !dbg !21
  %163 = fmul float %6, %131, !dbg !21
  %164 = fmul float %6, %132, !dbg !21
  %165 = fmul float %6, %133, !dbg !21
  %166 = fmul float %6, %134, !dbg !21
  %167 = fmul float %6, %135, !dbg !21
  %168 = fmul float %6, %136, !dbg !21
  %169 = fmul float %6, %137, !dbg !21
  %170 = fmul float %6, %138, !dbg !21
  %171 = fmul float %6, %139, !dbg !21
  %172 = fmul float %6, %140, !dbg !21
  %173 = fmul float %6, %141, !dbg !21
  %174 = fmul float %6, %142, !dbg !21
  %175 = fmul float %6, %143, !dbg !21
  %176 = fmul float %6, %144, !dbg !21
  %177 = fmul float %6, %145, !dbg !21
  %178 = fmul float %6, %146, !dbg !21
  %179 = fmul float %6, %147, !dbg !21
  %180 = fmul float %6, %148, !dbg !21
  %181 = fmul float %6, %149, !dbg !21
  %182 = fmul float %6, %150, !dbg !21
  %183 = fmul float %6, %151, !dbg !21
  %184 = fmul float %6, %152, !dbg !21
  %185 = fmul float %6, %153, !dbg !21
  %186 = fmul float %6, %154, !dbg !21
  tail call void @llvm.nvvm.barrier0(), !dbg !22
  %187 = tail call float @llvm.maxnum.f32(float %155, float %156), !dbg !26
  %188 = tail call float @llvm.maxnum.f32(float %187, float %157), !dbg !26
  %189 = tail call float @llvm.maxnum.f32(float %188, float %158), !dbg !26
  %190 = tail call float @llvm.maxnum.f32(float %189, float %159), !dbg !26
  %191 = tail call float @llvm.maxnum.f32(float %190, float %160), !dbg !26
  %192 = tail call float @llvm.maxnum.f32(float %191, float %161), !dbg !26
  %193 = tail call float @llvm.maxnum.f32(float %192, float %162), !dbg !26
  %194 = tail call float @llvm.maxnum.f32(float %193, float %163), !dbg !26
  %195 = tail call float @llvm.maxnum.f32(float %194, float %164), !dbg !26
  %196 = tail call float @llvm.maxnum.f32(float %195, float %165), !dbg !26
  %197 = tail call float @llvm.maxnum.f32(float %196, float %166), !dbg !26
  %198 = tail call float @llvm.maxnum.f32(float %197, float %167), !dbg !26
  %199 = tail call float @llvm.maxnum.f32(float %198, float %168), !dbg !26
  %200 = tail call float @llvm.maxnum.f32(float %199, float %169), !dbg !26
  %201 = tail call float @llvm.maxnum.f32(float %200, float %170), !dbg !26
  %202 = tail call float @llvm.maxnum.f32(float %201, float %171), !dbg !26
  %203 = tail call float @llvm.maxnum.f32(float %202, float %172), !dbg !26
  %204 = tail call float @llvm.maxnum.f32(float %203, float %173), !dbg !26
  %205 = tail call float @llvm.maxnum.f32(float %204, float %174), !dbg !26
  %206 = tail call float @llvm.maxnum.f32(float %205, float %175), !dbg !26
  %207 = tail call float @llvm.maxnum.f32(float %206, float %176), !dbg !26
  %208 = tail call float @llvm.maxnum.f32(float %207, float %177), !dbg !26
  %209 = tail call float @llvm.maxnum.f32(float %208, float %178), !dbg !26
  %210 = tail call float @llvm.maxnum.f32(float %209, float %179), !dbg !26
  %211 = tail call float @llvm.maxnum.f32(float %210, float %180), !dbg !26
  %212 = tail call float @llvm.maxnum.f32(float %211, float %181), !dbg !26
  %213 = tail call float @llvm.maxnum.f32(float %212, float %182), !dbg !26
  %214 = tail call float @llvm.maxnum.f32(float %213, float %183), !dbg !26
  %215 = tail call float @llvm.maxnum.f32(float %214, float %184), !dbg !26
  %216 = tail call float @llvm.maxnum.f32(float %215, float %185), !dbg !26
  %217 = tail call float @llvm.maxnum.f32(float %216, float %186), !dbg !26
  %218 = bitcast float %217 to i32, !dbg !22
  %219 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %218, i32 16, i32 31), !dbg !22
  %220 = bitcast i32 %219 to float, !dbg !22
  %221 = tail call float @llvm.maxnum.f32(float %217, float %220), !dbg !26
  %222 = bitcast float %221 to i32, !dbg !22
  %223 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %222, i32 8, i32 31), !dbg !22
  %224 = bitcast i32 %223 to float, !dbg !22
  %225 = tail call float @llvm.maxnum.f32(float %221, float %224), !dbg !26
  %226 = bitcast float %225 to i32, !dbg !22
  %227 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %226, i32 4, i32 31), !dbg !22
  %228 = bitcast i32 %227 to float, !dbg !22
  %229 = tail call float @llvm.maxnum.f32(float %225, float %228), !dbg !26
  %230 = bitcast float %229 to i32, !dbg !22
  %231 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %230, i32 2, i32 31), !dbg !22
  %232 = bitcast i32 %231 to float, !dbg !22
  %233 = tail call float @llvm.maxnum.f32(float %229, float %232), !dbg !26
  %234 = bitcast float %233 to i32, !dbg !22
  %235 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %234, i32 1, i32 31), !dbg !22
  %236 = bitcast i32 %235 to float, !dbg !22
  %237 = tail call float @llvm.maxnum.f32(float %233, float %236), !dbg !26
  %238 = bitcast float %237 to <1 x i32>, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %28, <1 x i32> %238, i1 %25) #4, !dbg !22
  tail call void @llvm.nvvm.barrier0(), !dbg !22
  %239 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %31, i1 %29) #4, !dbg !22
  %240 = bitcast i32 %239 to float, !dbg !22
  %241 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %239, i32 8, i32 31), !dbg !22
  %242 = bitcast i32 %241 to float, !dbg !22
  %243 = tail call float @llvm.maxnum.f32(float %240, float %242), !dbg !26
  %244 = bitcast float %243 to i32, !dbg !22
  %245 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %244, i32 4, i32 31), !dbg !22
  %246 = bitcast i32 %245 to float, !dbg !22
  %247 = tail call float @llvm.maxnum.f32(float %243, float %246), !dbg !26
  %248 = bitcast float %247 to i32, !dbg !22
  %249 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %248, i32 2, i32 31), !dbg !22
  %250 = bitcast i32 %249 to float, !dbg !22
  %251 = tail call float @llvm.maxnum.f32(float %247, float %250), !dbg !26
  %252 = bitcast float %251 to i32, !dbg !22
  %253 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %252, i32 1, i32 31), !dbg !22
  %254 = bitcast i32 %253 to float, !dbg !22
  %255 = tail call float @llvm.maxnum.f32(float %251, float %254), !dbg !26
  %256 = bitcast float %255 to <1 x i32>, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %31, <1 x i32> %256, i1 %34) #4, !dbg !22
  tail call void @llvm.nvvm.barrier0(), !dbg !22
  %257 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !22
  %258 = tail call float @llvm.maxnum.f32(float %36, float %257), !dbg !28
  %259 = fsub float %36, %258, !dbg !29
  %260 = fmul float %259, 0x3FF7154760000000, !dbg !30
  %261 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %260) #4, !dbg !30
  %262 = fmul float %37, %261, !dbg !31
  %263 = fsub float %155, %258, !dbg !32
  %264 = fsub float %156, %258, !dbg !32
  %265 = fsub float %157, %258, !dbg !32
  %266 = fsub float %158, %258, !dbg !32
  %267 = fsub float %159, %258, !dbg !32
  %268 = fsub float %160, %258, !dbg !32
  %269 = fsub float %161, %258, !dbg !32
  %270 = fsub float %162, %258, !dbg !32
  %271 = fsub float %163, %258, !dbg !32
  %272 = fsub float %164, %258, !dbg !32
  %273 = fsub float %165, %258, !dbg !32
  %274 = fsub float %166, %258, !dbg !32
  %275 = fsub float %167, %258, !dbg !32
  %276 = fsub float %168, %258, !dbg !32
  %277 = fsub float %169, %258, !dbg !32
  %278 = fsub float %170, %258, !dbg !32
  %279 = fsub float %171, %258, !dbg !32
  %280 = fsub float %172, %258, !dbg !32
  %281 = fsub float %173, %258, !dbg !32
  %282 = fsub float %174, %258, !dbg !32
  %283 = fsub float %175, %258, !dbg !32
  %284 = fsub float %176, %258, !dbg !32
  %285 = fsub float %177, %258, !dbg !32
  %286 = fsub float %178, %258, !dbg !32
  %287 = fsub float %179, %258, !dbg !32
  %288 = fsub float %180, %258, !dbg !32
  %289 = fsub float %181, %258, !dbg !32
  %290 = fsub float %182, %258, !dbg !32
  %291 = fsub float %183, %258, !dbg !32
  %292 = fsub float %184, %258, !dbg !32
  %293 = fsub float %185, %258, !dbg !32
  %294 = fsub float %186, %258, !dbg !32
  %295 = fmul float %263, 0x3FF7154760000000, !dbg !33
  %296 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %295) #4, !dbg !33
  %297 = fmul float %264, 0x3FF7154760000000, !dbg !33
  %298 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %297) #4, !dbg !33
  %299 = fmul float %265, 0x3FF7154760000000, !dbg !33
  %300 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %299) #4, !dbg !33
  %301 = fmul float %266, 0x3FF7154760000000, !dbg !33
  %302 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %301) #4, !dbg !33
  %303 = fmul float %267, 0x3FF7154760000000, !dbg !33
  %304 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %303) #4, !dbg !33
  %305 = fmul float %268, 0x3FF7154760000000, !dbg !33
  %306 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %305) #4, !dbg !33
  %307 = fmul float %269, 0x3FF7154760000000, !dbg !33
  %308 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %307) #4, !dbg !33
  %309 = fmul float %270, 0x3FF7154760000000, !dbg !33
  %310 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %309) #4, !dbg !33
  %311 = fmul float %271, 0x3FF7154760000000, !dbg !33
  %312 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %311) #4, !dbg !33
  %313 = fmul float %272, 0x3FF7154760000000, !dbg !33
  %314 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %313) #4, !dbg !33
  %315 = fmul float %273, 0x3FF7154760000000, !dbg !33
  %316 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %315) #4, !dbg !33
  %317 = fmul float %274, 0x3FF7154760000000, !dbg !33
  %318 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %317) #4, !dbg !33
  %319 = fmul float %275, 0x3FF7154760000000, !dbg !33
  %320 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %319) #4, !dbg !33
  %321 = fmul float %276, 0x3FF7154760000000, !dbg !33
  %322 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %321) #4, !dbg !33
  %323 = fmul float %277, 0x3FF7154760000000, !dbg !33
  %324 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %323) #4, !dbg !33
  %325 = fmul float %278, 0x3FF7154760000000, !dbg !33
  %326 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %325) #4, !dbg !33
  %327 = fmul float %279, 0x3FF7154760000000, !dbg !33
  %328 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %327) #4, !dbg !33
  %329 = fmul float %280, 0x3FF7154760000000, !dbg !33
  %330 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %329) #4, !dbg !33
  %331 = fmul float %281, 0x3FF7154760000000, !dbg !33
  %332 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %331) #4, !dbg !33
  %333 = fmul float %282, 0x3FF7154760000000, !dbg !33
  %334 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %333) #4, !dbg !33
  %335 = fmul float %283, 0x3FF7154760000000, !dbg !33
  %336 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %335) #4, !dbg !33
  %337 = fmul float %284, 0x3FF7154760000000, !dbg !33
  %338 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %337) #4, !dbg !33
  %339 = fmul float %285, 0x3FF7154760000000, !dbg !33
  %340 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %339) #4, !dbg !33
  %341 = fmul float %286, 0x3FF7154760000000, !dbg !33
  %342 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %341) #4, !dbg !33
  %343 = fmul float %287, 0x3FF7154760000000, !dbg !33
  %344 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %343) #4, !dbg !33
  %345 = fmul float %288, 0x3FF7154760000000, !dbg !33
  %346 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %345) #4, !dbg !33
  %347 = fmul float %289, 0x3FF7154760000000, !dbg !33
  %348 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %347) #4, !dbg !33
  %349 = fmul float %290, 0x3FF7154760000000, !dbg !33
  %350 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %349) #4, !dbg !33
  %351 = fmul float %291, 0x3FF7154760000000, !dbg !33
  %352 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %351) #4, !dbg !33
  %353 = fmul float %292, 0x3FF7154760000000, !dbg !33
  %354 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %353) #4, !dbg !33
  %355 = fmul float %293, 0x3FF7154760000000, !dbg !33
  %356 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %355) #4, !dbg !33
  %357 = fmul float %294, 0x3FF7154760000000, !dbg !33
  %358 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %357) #4, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %359 = fadd float %296, %298, !dbg !36
  %360 = fadd float %359, %300, !dbg !36
  %361 = fadd float %360, %302, !dbg !36
  %362 = fadd float %361, %304, !dbg !36
  %363 = fadd float %362, %306, !dbg !36
  %364 = fadd float %363, %308, !dbg !36
  %365 = fadd float %364, %310, !dbg !36
  %366 = fadd float %365, %312, !dbg !36
  %367 = fadd float %366, %314, !dbg !36
  %368 = fadd float %367, %316, !dbg !36
  %369 = fadd float %368, %318, !dbg !36
  %370 = fadd float %369, %320, !dbg !36
  %371 = fadd float %370, %322, !dbg !36
  %372 = fadd float %371, %324, !dbg !36
  %373 = fadd float %372, %326, !dbg !36
  %374 = fadd float %373, %328, !dbg !36
  %375 = fadd float %374, %330, !dbg !36
  %376 = fadd float %375, %332, !dbg !36
  %377 = fadd float %376, %334, !dbg !36
  %378 = fadd float %377, %336, !dbg !36
  %379 = fadd float %378, %338, !dbg !36
  %380 = fadd float %379, %340, !dbg !36
  %381 = fadd float %380, %342, !dbg !36
  %382 = fadd float %381, %344, !dbg !36
  %383 = fadd float %382, %346, !dbg !36
  %384 = fadd float %383, %348, !dbg !36
  %385 = fadd float %384, %350, !dbg !36
  %386 = fadd float %385, %352, !dbg !36
  %387 = fadd float %386, %354, !dbg !36
  %388 = fadd float %387, %356, !dbg !36
  %389 = fadd float %388, %358, !dbg !36
  %390 = bitcast float %389 to i32, !dbg !34
  %391 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %390, i32 16, i32 31), !dbg !34
  %392 = bitcast i32 %391 to float, !dbg !34
  %393 = fadd float %389, %392, !dbg !36
  %394 = bitcast float %393 to i32, !dbg !34
  %395 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %394, i32 8, i32 31), !dbg !34
  %396 = bitcast i32 %395 to float, !dbg !34
  %397 = fadd float %393, %396, !dbg !36
  %398 = bitcast float %397 to i32, !dbg !34
  %399 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %398, i32 4, i32 31), !dbg !34
  %400 = bitcast i32 %399 to float, !dbg !34
  %401 = fadd float %397, %400, !dbg !36
  %402 = bitcast float %401 to i32, !dbg !34
  %403 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %402, i32 2, i32 31), !dbg !34
  %404 = bitcast i32 %403 to float, !dbg !34
  %405 = fadd float %401, %404, !dbg !36
  %406 = bitcast float %405 to i32, !dbg !34
  %407 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %406, i32 1, i32 31), !dbg !34
  %408 = bitcast i32 %407 to float, !dbg !34
  %409 = fadd float %405, %408, !dbg !36
  %410 = bitcast float %409 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %28, <1 x i32> %410, i1 %25) #4, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %411 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %31, i1 %29) #4, !dbg !34
  %412 = bitcast i32 %411 to float, !dbg !34
  %413 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %411, i32 8, i32 31), !dbg !34
  %414 = bitcast i32 %413 to float, !dbg !34
  %415 = fadd float %412, %414, !dbg !36
  %416 = bitcast float %415 to i32, !dbg !34
  %417 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %416, i32 4, i32 31), !dbg !34
  %418 = bitcast i32 %417 to float, !dbg !34
  %419 = fadd float %415, %418, !dbg !36
  %420 = bitcast float %419 to i32, !dbg !34
  %421 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %420, i32 2, i32 31), !dbg !34
  %422 = bitcast i32 %421 to float, !dbg !34
  %423 = fadd float %419, %422, !dbg !36
  %424 = bitcast float %423 to i32, !dbg !34
  %425 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %424, i32 1, i32 31), !dbg !34
  %426 = bitcast i32 %425 to float, !dbg !34
  %427 = fadd float %423, %426, !dbg !36
  %428 = bitcast float %427 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %31, <1 x i32> %428, i1 %34) #4, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %429 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !34
  %430 = fadd float %262, %429, !dbg !37
  %431 = add i32 %38, 16384, !dbg !15
  %432 = icmp slt i32 %431, %11, !dbg !15
  br i1 %432, label %35, label %._crit_edge, !dbg !15

._crit_edge:                                      ; preds = %35, %13
  %.lcssa4 = phi float [ 0.000000e+00, %13 ], [ %430, %35 ], !dbg !38
  %.lcssa = phi float [ 0xFFF0000000000000, %13 ], [ %258, %35 ], !dbg !39
  %433 = fcmp olt float %.lcssa4, 0x3810000000000000, !dbg !40
  %434 = fmul float %.lcssa4, 0x4160000000000000, !dbg !40
  %.02.i = select i1 %433, float %434, float %.lcssa4, !dbg !40
  %i.i.0.i = select i1 %433, float -2.300000e+01, float 0.000000e+00, !dbg !40
  %435 = bitcast float %.02.i to i32, !dbg !40
  %436 = add i32 %435, -1059760811, !dbg !40
  %437 = and i32 %436, -8388608, !dbg !40
  %438 = sub i32 %435, %437, !dbg !40
  %439 = bitcast i32 %438 to float, !dbg !40
  %440 = sitofp i32 %437 to float, !dbg !40
  %441 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !40
  %.not.i = icmp eq i32 %441, 0, !dbg !40
  %442 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %440, float 0x3E80000000000000, float %i.i.0.i) #4, !dbg !40
  %443 = tail call float @llvm.nvvm.fma.rn.f(float %440, float 0x3E80000000000000, float %i.i.0.i) #4, !dbg !40
  %.08.i = select i1 %.not.i, float %443, float %442, !dbg !40
  %444 = fadd float %439, -1.000000e+00, !dbg !40
  %445 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !40
  %.not1.i = icmp eq i32 %445, 0, !dbg !40
  %446 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0xBFC0AA04E0000000, float %444, float 0x3FC2073EC0000000) #4, !dbg !40
  %447 = tail call float @llvm.nvvm.fma.rn.f(float 0xBFC0AA04E0000000, float %444, float 0x3FC2073EC0000000) #4, !dbg !40
  %.010.i = select i1 %.not1.i, float %447, float %446, !dbg !40
  %448 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !40
  %.not2.i = icmp eq i32 %448, 0, !dbg !40
  %449 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.010.i, float %444, float 0xBFBF19B980000000) #4, !dbg !40
  %450 = tail call float @llvm.nvvm.fma.rn.f(float %.010.i, float %444, float 0xBFBF19B980000000) #4, !dbg !40
  %.011.i = select i1 %.not2.i, float %450, float %449, !dbg !40
  %451 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !40
  %.not3.i = icmp eq i32 %451, 0, !dbg !40
  %452 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.011.i, float %444, float 0x3FC1E52AA0000000) #4, !dbg !40
  %453 = tail call float @llvm.nvvm.fma.rn.f(float %.011.i, float %444, float 0x3FC1E52AA0000000) #4, !dbg !40
  %.012.i = select i1 %.not3.i, float %453, float %452, !dbg !40
  %454 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !40
  %.not4.i = icmp eq i32 %454, 0, !dbg !40
  %455 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.012.i, float %444, float 0xBFC55B1720000000) #4, !dbg !40
  %456 = tail call float @llvm.nvvm.fma.rn.f(float %.012.i, float %444, float 0xBFC55B1720000000) #4, !dbg !40
  %.09.i = select i1 %.not4.i, float %456, float %455, !dbg !40
  %457 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !40
  %.not5.i = icmp eq i32 %457, 0, !dbg !40
  %458 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.09.i, float %444, float 0x3FC99DA160000000) #4, !dbg !40
  %459 = tail call float @llvm.nvvm.fma.rn.f(float %.09.i, float %444, float 0x3FC99DA160000000) #4, !dbg !40
  %.05.i = select i1 %.not5.i, float %459, float %458, !dbg !40
  %460 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !40
  %.not6.i = icmp eq i32 %460, 0, !dbg !40
  %461 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i, float %444, float 0xBFCFFFE440000000) #4, !dbg !40
  %462 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i, float %444, float 0xBFCFFFE440000000) #4, !dbg !40
  %.01.i = select i1 %.not6.i, float %462, float %461, !dbg !40
  %463 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !40
  %.not7.i = icmp eq i32 %463, 0, !dbg !40
  %464 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.01.i, float %444, float 0x3FD5554F00000000) #4, !dbg !40
  %465 = tail call float @llvm.nvvm.fma.rn.f(float %.01.i, float %444, float 0x3FD5554F00000000) #4, !dbg !40
  %.0.i = select i1 %.not7.i, float %465, float %464, !dbg !40
  %466 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !40
  %.not8.i = icmp eq i32 %466, 0, !dbg !40
  %467 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i, float %444, float -5.000000e-01) #4, !dbg !40
  %468 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i, float %444, float -5.000000e-01) #4, !dbg !40
  %.07.i = select i1 %.not8.i, float %468, float %467, !dbg !40
  %469 = fmul float %444, %.07.i, !dbg !40
  %470 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !40
  %.not9.i = icmp eq i32 %470, 0, !dbg !40
  %471 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %469, float %444, float %444) #4, !dbg !40
  %472 = tail call float @llvm.nvvm.fma.rn.f(float %469, float %444, float %444) #4, !dbg !40
  %.06.i = select i1 %.not9.i, float %472, float %471, !dbg !40
  %473 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !40
  %.not10.i = icmp eq i32 %473, 0, !dbg !40
  %474 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.08.i, float 0x3FE62E4300000000, float %.06.i) #4, !dbg !40
  %475 = tail call float @llvm.nvvm.fma.rn.f(float %.08.i, float 0x3FE62E4300000000, float %.06.i) #4, !dbg !40
  %.04.i = select i1 %.not10.i, float %475, float %474, !dbg !40
  %476 = icmp ugt i32 %435, 2139095039, !dbg !40
  br i1 %476, label %__nv_fmaf_rn.exit.i.i, label %__nv_logf.exit, !dbg !40

__nv_fmaf_rn.exit.i.i:                            ; preds = %._crit_edge
  %477 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !40
  %.not11.i = icmp eq i32 %477, 0, !dbg !40
  %478 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.02.i, float 0x7FF0000000000000, float 0x7FF0000000000000) #4, !dbg !40
  %479 = tail call float @llvm.nvvm.fma.rn.f(float %.02.i, float 0x7FF0000000000000, float 0x7FF0000000000000) #4, !dbg !40
  %.03.i = select i1 %.not11.i, float %479, float %478, !dbg !40
  br label %__nv_logf.exit, !dbg !40

__nv_logf.exit:                                   ; preds = %._crit_edge, %__nv_fmaf_rn.exit.i.i
  %r.i.0.i = phi float [ %.03.i, %__nv_fmaf_rn.exit.i.i ], [ %.04.i, %._crit_edge ], !dbg !40
  %480 = fcmp oeq float %.02.i, 0.000000e+00, !dbg !40
  %r.i.1.i = select i1 %480, float 0xFFF0000000000000, float %r.i.0.i, !dbg !40
  %481 = fadd float %.lcssa, %r.i.1.i, !dbg !41
  %482 = getelementptr float, ptr addrspace(1) %1, i64 %16, !dbg !42
  %483 = icmp eq i32 %19, 0, !dbg !43
  %484 = bitcast float %481 to i32, !dbg !43
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %484, ptr addrspace(1) %482, i1 %483) #4, !dbg !43
  %485 = getelementptr i64, ptr addrspace(1) %4, i64 %16, !dbg !44
  %486 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %485, i1 true) #4, !dbg !45
  %487 = sext i32 %8 to i64, !dbg !46
  %488 = icmp eq i64 %486, %487, !dbg !46
  br i1 %488, label %510, label %489, !dbg !47

489:                                              ; preds = %__nv_logf.exit
  %490 = sext i32 %10 to i64, !dbg !48
  %491 = sub i64 %486, %490, !dbg !48
  %492 = icmp sgt i64 %491, -1, !dbg !49
  %493 = sext i32 %11 to i64, !dbg !50
  %494 = icmp slt i64 %491, %493, !dbg !50
  %495 = and i1 %492, %494, !dbg !51
  br i1 %495, label %496, label %503, !dbg !52

496:                                              ; preds = %489
  %497 = getelementptr bfloat, ptr addrspace(1) %18, i64 %491, !dbg !53
  %498 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %497, i1 true) #4, !dbg !54
  %499 = bitcast i16 %498 to bfloat, !dbg !54
  %500 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(bfloat %499) #4, !dbg !55
  %501 = fmul float %6, %500, !dbg !55
  %502 = fsub float %481, %501, !dbg !56
  br label %503, !dbg !52

503:                                              ; preds = %496, %489
  %504 = phi float [ %502, %496 ], [ 0.000000e+00, %489 ], !dbg !52
  %505 = fmul float %7, %481, !dbg !57
  %506 = fmul float %481, %505, !dbg !58
  %507 = fadd float %506, %504, !dbg !59
  %508 = bitcast float %507 to i32, !dbg !60
  %509 = bitcast float %506 to i32, !dbg !61
  br label %510, !dbg !47

510:                                              ; preds = %503, %__nv_logf.exit
  %511 = phi i32 [ %508, %503 ], [ 0, %__nv_logf.exit ], !dbg !47
  %512 = phi i32 [ %509, %503 ], [ 0, %__nv_logf.exit ], !dbg !47
  %513 = getelementptr float, ptr addrspace(1) %0, i64 %16, !dbg !62
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %511, ptr addrspace(1) %513, i1 %483) #4, !dbg !60
  %514 = getelementptr float, ptr addrspace(1) %2, i64 %16, !dbg !63
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %512, ptr addrspace(1) %514, i1 %483) #4, !dbg !61
  ret void, !dbg !64
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.maxnum.f32(float, float) #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.ftz.f(float, float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.f(float, float, float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cross_entropy.py", directory: "/usr/local/lib/python3.10/dist-packages/flash_attn/ops/triton")
!4 = !{ptr @cross_entropy_fwd_kernel, !"kernel", i32 1}
!5 = !{ptr @cross_entropy_fwd_kernel, !"reqntidx", i32 512}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "cross_entropy_fwd_kernel", linkageName: "cross_entropy_fwd_kernel", scope: !3, file: !3, line: 25, type: !8, scopeLine: 25, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 45, column: 28, scope: !7)
!11 = !DILocation(line: 46, column: 61, scope: !7)
!12 = !DILocation(line: 46, column: 40, scope: !7)
!13 = !DILocation(line: 46, column: 30, scope: !7)
!14 = !DILocation(line: 53, column: 45, scope: !7)
!15 = !DILocation(line: 52, column: 43, scope: !7)
!16 = !DILocation(line: 53, column: 32, scope: !7)
!17 = !DILocation(line: 54, column: 60, scope: !7)
!18 = !DILocation(line: 54, column: 42, scope: !7)
!19 = !DILocation(line: 54, column: 29, scope: !7)
!20 = !DILocation(line: 55, column: 16, scope: !7)
!21 = !DILocation(line: 56, column: 16, scope: !7)
!22 = !DILocation(line: 184, column: 40, scope: !23, inlinedAt: !25)
!23 = distinct !DILexicalBlockFile(scope: !7, file: !24, discriminator: 0)
!24 = !DIFile(filename: "standard.py", directory: "/usr/local/lib/python3.10/dist-packages/triton/language")
!25 = !DILocation(line: 59, column: 45, scope: !7)
!26 = !DILocation(line: 163, column: 27, scope: !27, inlinedAt: !25)
!27 = distinct !DILexicalBlockFile(scope: !23, file: !24, discriminator: 0)
!28 = !DILocation(line: 59, column: 38, scope: !7)
!29 = !DILocation(line: 60, column: 31, scope: !7)
!30 = !DILocation(line: 60, column: 25, scope: !7)
!31 = !DILocation(line: 60, column: 42, scope: !7)
!32 = !DILocation(line: 60, column: 71, scope: !7)
!33 = !DILocation(line: 60, column: 62, scope: !7)
!34 = !DILocation(line: 267, column: 36, scope: !23, inlinedAt: !35)
!35 = !DILocation(line: 60, column: 55, scope: !7)
!36 = !DILocation(line: 256, column: 15, scope: !27, inlinedAt: !35)
!37 = !DILocation(line: 60, column: 48, scope: !7)
!38 = !DILocation(line: 51, column: 14, scope: !7)
!39 = !DILocation(line: 50, column: 14, scope: !7)
!40 = !DILocation(line: 62, column: 21, scope: !7)
!41 = !DILocation(line: 62, column: 28, scope: !7)
!42 = !DILocation(line: 63, column: 27, scope: !7)
!43 = !DILocation(line: 63, column: 36, scope: !7)
!44 = !DILocation(line: 66, column: 37, scope: !7)
!45 = !DILocation(line: 66, column: 24, scope: !7)
!46 = !DILocation(line: 67, column: 20, scope: !7)
!47 = !DILocation(line: 67, column: 7, scope: !7)
!48 = !DILocation(line: 71, column: 21, scope: !7)
!49 = !DILocation(line: 72, column: 24, scope: !7)
!50 = !DILocation(line: 72, column: 42, scope: !7)
!51 = !DILocation(line: 72, column: 30, scope: !7)
!52 = !DILocation(line: 72, column: 11, scope: !7)
!53 = !DILocation(line: 0, scope: !7)
!54 = !DILocation(line: 73, column: 35, scope: !7)
!55 = !DILocation(line: 73, column: 61, scope: !7)
!56 = !DILocation(line: 81, column: 53, scope: !7)
!57 = !DILocation(line: 89, column: 40, scope: !7)
!58 = !DILocation(line: 89, column: 46, scope: !7)
!59 = !DILocation(line: 90, column: 20, scope: !7)
!60 = !DILocation(line: 93, column: 33, scope: !7)
!61 = !DILocation(line: 95, column: 39, scope: !7)
!62 = !DILocation(line: 93, column: 24, scope: !7)
!63 = !DILocation(line: 95, column: 30, scope: !7)
!64 = !DILocation(line: 94, column: 4, scope: !7)
